<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="/public/images/favicon.ico">
    <title>Damon Nguyen</title>
    <%- include ../css.ejs %>
  </head>
  <body>
    <%- include ../navbar.ejs %>
    <!-- blog content -->
    <div class="container blog-this">
      <h1 class="text-center">this in JavaScript</h1>
      <div class="col-xs-12 col-md-8 col-md-offset-2">
        <p>One of the most confusing parts of JavaScript is the keyword <span class="js-this">this</span>. As I spent more time reading online articles and worked on countless projects using it I have gained a deeper understanding of <span class="js-this">this</span> in JavaScript.</p>
        <p><span class="js-this">this</span> generally refers to a JavaScript object or describes how a function is called. Just like the pronoun “he” which refers to a male <span class="js-this">this</span> refers to a JavaScript object that a function is bound to.</p>
        <p class="text-center">These are some of the variation of how <span class="js-this">this</span> works.</p>       
      </div>

      <h1 class="text-center col-xs-12">Default Binding or Free Function Invocation</h1>
      <div class="col-xs-12 col-md-8 col-md-offset-2">
        <p>If we invoke a function that has a keyword <span class="js-this">this</span> inside of it then <span class="js-this">this</span> will refer to the window object. This is usually the default behavior if there are not objects being referred to by <span class="js-this">this</span>.</p>
        <img src="/images/blog-images/js-this/freeFunction.png">
        <p>In the example above I have declared a function log that console log <span class="js-this">this.greeting</span> and because <span class="js-this">this</span> is not being invoked with any particular object <span class="js-this">this</span> will by default point to the window object. Any variables declared on the global scope will be a property of the window object.</p>
      </div>

      <h1 class="text-center col-xs-12">Implicit Binding</h1>
      <div class="col-xs-12 col-md-8 col-md-offset-2">
        <p>If we invoke a method inside of an object and that method has a keyword <span class="js-this">this</span> inside of it, than <span class="js-this">this</span> will refer to that object. Another way to think of it is during invocation of a method <span class="js-this">this</span> will refer to the object left of the dot.</p>
        <img src="/images/blog-images/js-this/implicit.png">
        <p>Because the greeting() function is a method of the damon object, therefore <span class="js-this">this</span> inside of the greeting() method will be referring to the damon object and we can access the name property allowing us to log:</p>
        <p class="text-center">'Hello World! my name is Damon!'</p>
        <p class="text-center">Don't forget! During a method invocation <span class="js-this">this</span> refers to the object left of the dot: </p>
        <p class="text-center">damon.greet(); this === damon</p>
      </div>

      <h1 class="text-center col-xs-12">Explicit Binding</h1>
      <div class="col-xs-12 col-md-8 col-md-offset-2">
        <p>What if we want to force a function call with a specific object for the binding of <span class="js-this">this</span> without putting that function as a method of an object? We can do that with the utility methods call() and apply() that are available to all functions. The call() and apply() methods calls a function with a given <span class="js-this">this</span> value and arguments provided. We are basically telling a function to invoke itself with a specific object as its context.</p>
        <img src="/images/blog-images/js-this/explicit.png">
        <p>In the example above we have a damon object and he wanted to learn how to dance, so we helped him learn by using call() and apply().</p>
        <p>The only difference between call() and apply() would be how we define the arguments we want to use for the function that we want to invoke. call() would take in a single argument as the second parameter and anything after would be the next argument in the sequence. For apply() the second parameter would take in an array of arguments. The syntax is fairly simple:</p>
        <p class="text-center">func.call(<span class="js-this">thisContext</span>, arg, arg..);</p>
        <p class="text-center">or</p>
        <p class="text-center">func.call(<span class="js-this">thisContext</span>, [args, arg..]);</p>
      </div>

      <h1 class="text-center col-xs-12">Hard Binding</h1>
      <div class="col-xs-12 col-md-8 col-md-offset-2">
        <p>In some cases, the <span class="js-this">this</span> binding loses its object context especially if we want to pass the method as a callback function. For example: </p>
        <img src="/images/blog-images/js-this/hard1.png">
        <p>Why is that happening? Well, it's pretty simple. Whenever you put an expression(in this case damon.greet) as an argument that expression will be evaluated before the function is run. Which looks something like this..</p>
        <img src="/images/blog-images/js-this/hard2.png">
        <p>What does the example above look like? You guessed right! It is a default binding or free function invocation! damon.greet evaluated into a free function invocation, therefore <span class="js-this">this</span> refers to the window object and because the window doesn't have the property name it returns undefined.</p>
        <p>Luckily we have function's bind() method to help persist the binding between objects and functions.</p>
        <img src="/images/blog-images/js-this/hard3.png">
        <p>The expression damon.greet.bind(damon) returns a function wrapping over the explicit binding of the function greet() and the object damon. It kind of looks like this..</p>
        <img src="/images/blog-images/js-this/bind.png">
        <p style="padding-bottom: 20px;">As you can see the bind() method adds a layer of protection(function wrapper), therefore you can assign a method with an object context to a variable or pass it as an argument to a function without it losing its <span class="js-this">this</span> binding.</p>
      </div>

    </div>

    <%- include ../footer.ejs %>
    <%- include ../js.ejs %>
  </body>
</html>